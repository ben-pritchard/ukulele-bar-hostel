<?php

class QueenAttackFunctionalTests extends DrupalWebTestCase {
    public static function getInfo() {
        return array(
            'name' => 'Queen Attack functional tests',
            'description' => 'Tests for the Queen Attack module.',
            'group' => 'Epicodus Example Tests',
        );
    }

    public function setUp() {
        parent::setUp(array('queen_attack'));
    }

    public function testIntelligenceReport() {
        $coordinates = array();
        $coordinates['queen_x'] = 1;
        $coordinates['queen_y'] = 1;
        $coordinates['target_x'] = 3;
        $coordinates['target_y'] = 3;
        $this->drupalPost('queen_attack', $coordinates, t('Gather intel'));
        $this->assertText(t('The Queen CAN attack the Target!'));

        $coordinates = array();
        $coordinates['queen_x'] = 1;
        $coordinates['queen_y'] = 2;
        $coordinates['target_x'] = 3;
        $coordinates['target_y'] = 3;
        $this->drupalPost('queen_attack', $coordinates, t('Gather intel'));
        $this->assertText(t('The Queen CANNOT attack the Target!'));
    }
}

class QueenAttackUnitTests extends DrupalUnitTestCase {
    public static function getInfo() {
        return array(
            'name' => 'Queen Attack unit tests',
            'description' => 'Test that determine_line_of_sight works properly',
            'group' => 'Epicodus Example Tests',
        );
    }

    function testDetermineLineOfSight() {
        $result = determine_line_of_sight(1, 1, 2, 2);
        $message = 'Queen can attack at diagonal alignment';
        $this->assertTrue($result, $message);

        $result = determine_line_of_sight(1, 3, 8, 3);
        $message = 'Queen can attack at horizontal alignment';
        $this->assertTrue($result, $message);

        $result = determine_line_of_sight(3, 1, 3, 5);
        $message = 'Queen can attack at vertical alignment';
        $this->assertTrue($result, $message);

        $result = determine_line_of_sight(1, 1, 2, 3);
        $message = 'Queen cannot attack when not in line of sight';
        $this->assertFalse($result, $message);
    }
}
